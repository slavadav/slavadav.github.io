// source: layer1/billing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.Billing', null, global);
goog.exportSymbol('proto.v1.Billing.AccountLimitsLeft', null, global);
goog.exportSymbol('proto.v1.Billing.AccountLimitsLeft.Max', null, global);
goog.exportSymbol('proto.v1.Billing.AccountLimitsLeft.Used', null, global);
goog.exportSymbol('proto.v1.Billing.BillingAddress', null, global);
goog.exportSymbol('proto.v1.Billing.Currency', null, global);
goog.exportSymbol('proto.v1.Billing.Order', null, global);
goog.exportSymbol('proto.v1.Billing.Order.Item', null, global);
goog.exportSymbol('proto.v1.Billing.Order.State', null, global);
goog.exportSymbol('proto.v1.Billing.PaySystem', null, global);
goog.exportSymbol('proto.v1.Billing.PricePlan', null, global);
goog.exportSymbol('proto.v1.Billing.Product', null, global);
goog.exportSymbol('proto.v1.Billing.ProductType', null, global);
goog.exportSymbol('proto.v1.Billing.Tariff', null, global);
goog.exportSymbol('proto.v1.Billing.Tariff.Limits', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.displayName = 'proto.v1.Billing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.Tariff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.Tariff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.Tariff.displayName = 'proto.v1.Billing.Tariff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.Tariff.Limits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.Tariff.Limits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.Tariff.Limits.displayName = 'proto.v1.Billing.Tariff.Limits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.AccountLimitsLeft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.AccountLimitsLeft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.AccountLimitsLeft.displayName = 'proto.v1.Billing.AccountLimitsLeft';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.AccountLimitsLeft.Max = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.AccountLimitsLeft.Max, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.AccountLimitsLeft.Max.displayName = 'proto.v1.Billing.AccountLimitsLeft.Max';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.AccountLimitsLeft.Used = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.AccountLimitsLeft.Used, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.AccountLimitsLeft.Used.displayName = 'proto.v1.Billing.AccountLimitsLeft.Used';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.Billing.Product.repeatedFields_, null);
};
goog.inherits(proto.v1.Billing.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.Product.displayName = 'proto.v1.Billing.Product';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.PricePlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.PricePlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.PricePlan.displayName = 'proto.v1.Billing.PricePlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.Billing.Order.repeatedFields_, null);
};
goog.inherits(proto.v1.Billing.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.Order.displayName = 'proto.v1.Billing.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.Order.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.Order.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.Order.Item.displayName = 'proto.v1.Billing.Order.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Billing.BillingAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.Billing.BillingAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.Billing.BillingAddress.displayName = 'proto.v1.Billing.BillingAddress';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing}
 */
proto.v1.Billing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing;
  return proto.v1.Billing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing}
 */
proto.v1.Billing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.v1.Billing.Currency = {
  RUB: 0
};

/**
 * @enum {number}
 */
proto.v1.Billing.ProductType = {
  TYPE_NONE: 0,
  TYPE_TARIFF: 1
};

/**
 * @enum {number}
 */
proto.v1.Billing.PaySystem = {
  PAYSYSTEM_NONE: 0,
  PAYSYSTEM_CARD: 1,
  PAYSYSTEM_INVOICE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.Tariff.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.Tariff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.Tariff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Tariff.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limit: (f = msg.getLimit()) && proto.v1.Billing.Tariff.Limits.toObject(includeInstance, f),
    productId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    promoPlanId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    free: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.Tariff}
 */
proto.v1.Billing.Tariff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.Tariff;
  return proto.v1.Billing.Tariff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.Tariff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.Tariff}
 */
proto.v1.Billing.Tariff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.v1.Billing.Tariff.Limits;
      reader.readMessage(value,proto.v1.Billing.Tariff.Limits.deserializeBinaryFromReader);
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPromoPlanId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.Tariff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.Tariff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.Tariff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Tariff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.Billing.Tariff.Limits.serializeBinaryToWriter
    );
  }
  f = message.getProductId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPromoPlanId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFree();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.Tariff.Limits.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.Tariff.Limits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.Tariff.Limits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Tariff.Limits.toObject = function(includeInstance, msg) {
  var f, obj = {
    users: jspb.Message.getFieldWithDefault(msg, 1, 0),
    storage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.Tariff.Limits}
 */
proto.v1.Billing.Tariff.Limits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.Tariff.Limits;
  return proto.v1.Billing.Tariff.Limits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.Tariff.Limits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.Tariff.Limits}
 */
proto.v1.Billing.Tariff.Limits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStorage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.Tariff.Limits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.Tariff.Limits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.Tariff.Limits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Tariff.Limits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsers();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStorage();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 users = 1;
 * @return {number}
 */
proto.v1.Billing.Tariff.Limits.prototype.getUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Tariff.Limits} returns this
 */
proto.v1.Billing.Tariff.Limits.prototype.setUsers = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 storage = 3;
 * @return {number}
 */
proto.v1.Billing.Tariff.Limits.prototype.getStorage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Tariff.Limits} returns this
 */
proto.v1.Billing.Tariff.Limits.prototype.setStorage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.Billing.Tariff.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Tariff} returns this
 */
proto.v1.Billing.Tariff.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.v1.Billing.Tariff.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Tariff} returns this
 */
proto.v1.Billing.Tariff.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Limits limit = 3;
 * @return {?proto.v1.Billing.Tariff.Limits}
 */
proto.v1.Billing.Tariff.prototype.getLimit = function() {
  return /** @type{?proto.v1.Billing.Tariff.Limits} */ (
    jspb.Message.getWrapperField(this, proto.v1.Billing.Tariff.Limits, 3));
};


/**
 * @param {?proto.v1.Billing.Tariff.Limits|undefined} value
 * @return {!proto.v1.Billing.Tariff} returns this
*/
proto.v1.Billing.Tariff.prototype.setLimit = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.Billing.Tariff} returns this
 */
proto.v1.Billing.Tariff.prototype.clearLimit = function() {
  return this.setLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.Billing.Tariff.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string product_id = 4;
 * @return {string}
 */
proto.v1.Billing.Tariff.prototype.getProductId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Tariff} returns this
 */
proto.v1.Billing.Tariff.prototype.setProductId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string promo_plan_id = 5;
 * @return {string}
 */
proto.v1.Billing.Tariff.prototype.getPromoPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Tariff} returns this
 */
proto.v1.Billing.Tariff.prototype.setPromoPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool free = 6;
 * @return {boolean}
 */
proto.v1.Billing.Tariff.prototype.getFree = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.Billing.Tariff} returns this
 */
proto.v1.Billing.Tariff.prototype.setFree = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.AccountLimitsLeft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.AccountLimitsLeft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.AccountLimitsLeft.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    users: jspb.Message.getFieldWithDefault(msg, 3, 0),
    max: (f = msg.getMax()) && proto.v1.Billing.AccountLimitsLeft.Max.toObject(includeInstance, f),
    used: (f = msg.getUsed()) && proto.v1.Billing.AccountLimitsLeft.Used.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.AccountLimitsLeft}
 */
proto.v1.Billing.AccountLimitsLeft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.AccountLimitsLeft;
  return proto.v1.Billing.AccountLimitsLeft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.AccountLimitsLeft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.AccountLimitsLeft}
 */
proto.v1.Billing.AccountLimitsLeft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStorage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsers(value);
      break;
    case 4:
      var value = new proto.v1.Billing.AccountLimitsLeft.Max;
      reader.readMessage(value,proto.v1.Billing.AccountLimitsLeft.Max.deserializeBinaryFromReader);
      msg.setMax(value);
      break;
    case 5:
      var value = new proto.v1.Billing.AccountLimitsLeft.Used;
      reader.readMessage(value,proto.v1.Billing.AccountLimitsLeft.Used.deserializeBinaryFromReader);
      msg.setUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.AccountLimitsLeft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.AccountLimitsLeft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.AccountLimitsLeft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStorage();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUsers();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMax();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.Billing.AccountLimitsLeft.Max.serializeBinaryToWriter
    );
  }
  f = message.getUsed();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.v1.Billing.AccountLimitsLeft.Used.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.AccountLimitsLeft.Max.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.AccountLimitsLeft.Max.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.AccountLimitsLeft.Max} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.AccountLimitsLeft.Max.toObject = function(includeInstance, msg) {
  var f, obj = {
    storage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    users: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.AccountLimitsLeft.Max}
 */
proto.v1.Billing.AccountLimitsLeft.Max.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.AccountLimitsLeft.Max;
  return proto.v1.Billing.AccountLimitsLeft.Max.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.AccountLimitsLeft.Max} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.AccountLimitsLeft.Max}
 */
proto.v1.Billing.AccountLimitsLeft.Max.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStorage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.AccountLimitsLeft.Max.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.AccountLimitsLeft.Max.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.AccountLimitsLeft.Max} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.AccountLimitsLeft.Max.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorage();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsers();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 storage = 1;
 * @return {number}
 */
proto.v1.Billing.AccountLimitsLeft.Max.prototype.getStorage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.AccountLimitsLeft.Max} returns this
 */
proto.v1.Billing.AccountLimitsLeft.Max.prototype.setStorage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 users = 2;
 * @return {number}
 */
proto.v1.Billing.AccountLimitsLeft.Max.prototype.getUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.AccountLimitsLeft.Max} returns this
 */
proto.v1.Billing.AccountLimitsLeft.Max.prototype.setUsers = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.AccountLimitsLeft.Used.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.AccountLimitsLeft.Used.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.AccountLimitsLeft.Used} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.AccountLimitsLeft.Used.toObject = function(includeInstance, msg) {
  var f, obj = {
    storage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    users: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.AccountLimitsLeft.Used}
 */
proto.v1.Billing.AccountLimitsLeft.Used.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.AccountLimitsLeft.Used;
  return proto.v1.Billing.AccountLimitsLeft.Used.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.AccountLimitsLeft.Used} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.AccountLimitsLeft.Used}
 */
proto.v1.Billing.AccountLimitsLeft.Used.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStorage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.AccountLimitsLeft.Used.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.AccountLimitsLeft.Used.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.AccountLimitsLeft.Used} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.AccountLimitsLeft.Used.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorage();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsers();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 storage = 1;
 * @return {number}
 */
proto.v1.Billing.AccountLimitsLeft.Used.prototype.getStorage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.AccountLimitsLeft.Used} returns this
 */
proto.v1.Billing.AccountLimitsLeft.Used.prototype.setStorage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 users = 2;
 * @return {number}
 */
proto.v1.Billing.AccountLimitsLeft.Used.prototype.getUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.AccountLimitsLeft.Used} returns this
 */
proto.v1.Billing.AccountLimitsLeft.Used.prototype.setUsers = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.AccountLimitsLeft} returns this
 */
proto.v1.Billing.AccountLimitsLeft.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 storage = 2;
 * @return {number}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.getStorage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.AccountLimitsLeft} returns this
 */
proto.v1.Billing.AccountLimitsLeft.prototype.setStorage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 users = 3;
 * @return {number}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.getUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.AccountLimitsLeft} returns this
 */
proto.v1.Billing.AccountLimitsLeft.prototype.setUsers = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Max max = 4;
 * @return {?proto.v1.Billing.AccountLimitsLeft.Max}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.getMax = function() {
  return /** @type{?proto.v1.Billing.AccountLimitsLeft.Max} */ (
    jspb.Message.getWrapperField(this, proto.v1.Billing.AccountLimitsLeft.Max, 4));
};


/**
 * @param {?proto.v1.Billing.AccountLimitsLeft.Max|undefined} value
 * @return {!proto.v1.Billing.AccountLimitsLeft} returns this
*/
proto.v1.Billing.AccountLimitsLeft.prototype.setMax = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.Billing.AccountLimitsLeft} returns this
 */
proto.v1.Billing.AccountLimitsLeft.prototype.clearMax = function() {
  return this.setMax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.hasMax = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Used used = 5;
 * @return {?proto.v1.Billing.AccountLimitsLeft.Used}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.getUsed = function() {
  return /** @type{?proto.v1.Billing.AccountLimitsLeft.Used} */ (
    jspb.Message.getWrapperField(this, proto.v1.Billing.AccountLimitsLeft.Used, 5));
};


/**
 * @param {?proto.v1.Billing.AccountLimitsLeft.Used|undefined} value
 * @return {!proto.v1.Billing.AccountLimitsLeft} returns this
*/
proto.v1.Billing.AccountLimitsLeft.prototype.setUsed = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.Billing.AccountLimitsLeft} returns this
 */
proto.v1.Billing.AccountLimitsLeft.prototype.clearUsed = function() {
  return this.setUsed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.Billing.AccountLimitsLeft.prototype.hasUsed = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.Billing.Product.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tariff: (f = msg.getTariff()) && proto.v1.Billing.Tariff.toObject(includeInstance, f),
    plansList: jspb.Message.toObjectList(msg.getPlansList(),
    proto.v1.Billing.PricePlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.Product}
 */
proto.v1.Billing.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.Product;
  return proto.v1.Billing.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.Product}
 */
proto.v1.Billing.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.v1.Billing.ProductType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.v1.Billing.Tariff;
      reader.readMessage(value,proto.v1.Billing.Tariff.deserializeBinaryFromReader);
      msg.setTariff(value);
      break;
    case 4:
      var value = new proto.v1.Billing.PricePlan;
      reader.readMessage(value,proto.v1.Billing.PricePlan.deserializeBinaryFromReader);
      msg.addPlans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTariff();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.Billing.Tariff.serializeBinaryToWriter
    );
  }
  f = message.getPlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.v1.Billing.PricePlan.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.Billing.Product.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Product} returns this
 */
proto.v1.Billing.Product.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProductType type = 2;
 * @return {!proto.v1.Billing.ProductType}
 */
proto.v1.Billing.Product.prototype.getType = function() {
  return /** @type {!proto.v1.Billing.ProductType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.v1.Billing.ProductType} value
 * @return {!proto.v1.Billing.Product} returns this
 */
proto.v1.Billing.Product.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Tariff tariff = 3;
 * @return {?proto.v1.Billing.Tariff}
 */
proto.v1.Billing.Product.prototype.getTariff = function() {
  return /** @type{?proto.v1.Billing.Tariff} */ (
    jspb.Message.getWrapperField(this, proto.v1.Billing.Tariff, 3));
};


/**
 * @param {?proto.v1.Billing.Tariff|undefined} value
 * @return {!proto.v1.Billing.Product} returns this
*/
proto.v1.Billing.Product.prototype.setTariff = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.Billing.Product} returns this
 */
proto.v1.Billing.Product.prototype.clearTariff = function() {
  return this.setTariff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.Billing.Product.prototype.hasTariff = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PricePlan plans = 4;
 * @return {!Array<!proto.v1.Billing.PricePlan>}
 */
proto.v1.Billing.Product.prototype.getPlansList = function() {
  return /** @type{!Array<!proto.v1.Billing.PricePlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.Billing.PricePlan, 4));
};


/**
 * @param {!Array<!proto.v1.Billing.PricePlan>} value
 * @return {!proto.v1.Billing.Product} returns this
*/
proto.v1.Billing.Product.prototype.setPlansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.v1.Billing.PricePlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.Billing.PricePlan}
 */
proto.v1.Billing.Product.prototype.addPlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.v1.Billing.PricePlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.Billing.Product} returns this
 */
proto.v1.Billing.Product.prototype.clearPlansList = function() {
  return this.setPlansList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.PricePlan.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.PricePlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.PricePlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.PricePlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    periodMonth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pricePerUnit: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.PricePlan}
 */
proto.v1.Billing.PricePlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.PricePlan;
  return proto.v1.Billing.PricePlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.PricePlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.PricePlan}
 */
proto.v1.Billing.PricePlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriodMonth(value);
      break;
    case 3:
      var value = /** @type {!proto.v1.Billing.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPricePerUnit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.PricePlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.PricePlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.PricePlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.PricePlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPeriodMonth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPricePerUnit();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.Billing.PricePlan.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.PricePlan} returns this
 */
proto.v1.Billing.PricePlan.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 period_month = 2;
 * @return {number}
 */
proto.v1.Billing.PricePlan.prototype.getPeriodMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.PricePlan} returns this
 */
proto.v1.Billing.PricePlan.prototype.setPeriodMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Currency currency = 3;
 * @return {!proto.v1.Billing.Currency}
 */
proto.v1.Billing.PricePlan.prototype.getCurrency = function() {
  return /** @type {!proto.v1.Billing.Currency} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.v1.Billing.Currency} value
 * @return {!proto.v1.Billing.PricePlan} returns this
 */
proto.v1.Billing.PricePlan.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double price_per_unit = 4;
 * @return {number}
 */
proto.v1.Billing.PricePlan.prototype.getPricePerUnit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.PricePlan} returns this
 */
proto.v1.Billing.PricePlan.prototype.setPricePerUnit = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double price = 5;
 * @return {number}
 */
proto.v1.Billing.PricePlan.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.PricePlan} returns this
 */
proto.v1.Billing.PricePlan.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.Billing.Order.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    paidAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    payLink: jspb.Message.getFieldWithDefault(msg, 20, ""),
    invoiceLink: jspb.Message.getFieldWithDefault(msg, 21, ""),
    voucherLink: jspb.Message.getFieldWithDefault(msg, 22, ""),
    webPostForm: jspb.Message.getFieldWithDefault(msg, 6, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.v1.Billing.Order.Item.toObject, includeInstance),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    currency: jspb.Message.getFieldWithDefault(msg, 9, 0),
    seqId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    payType: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.Order}
 */
proto.v1.Billing.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.Order;
  return proto.v1.Billing.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.Order}
 */
proto.v1.Billing.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPaidAt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayLink(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoiceLink(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoucherLink(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebPostForm(value);
      break;
    case 7:
      var value = new proto.v1.Billing.Order.Item;
      reader.readMessage(value,proto.v1.Billing.Order.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 9:
      var value = /** @type {!proto.v1.Billing.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqId(value);
      break;
    case 11:
      var value = /** @type {!proto.v1.Billing.PaySystem} */ (reader.readEnum());
      msg.setPayType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPaidAt();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getPayLink();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getInvoiceLink();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getVoucherLink();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getWebPostForm();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.v1.Billing.Order.Item.serializeBinaryToWriter
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getSeqId();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getPayType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.v1.Billing.Order.State = {
  CREATED: 0,
  PAYED: 1,
  DELIVEREED: 2,
  CANCELED: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.Order.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.Order.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.Order.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Order.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && proto.v1.Billing.Product.toObject(includeInstance, f),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.Order.Item}
 */
proto.v1.Billing.Order.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.Order.Item;
  return proto.v1.Billing.Order.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.Order.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.Order.Item}
 */
proto.v1.Billing.Order.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.Billing.Product;
      reader.readMessage(value,proto.v1.Billing.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.Order.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.Order.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.Order.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.Order.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.Billing.Product.serializeBinaryToWriter
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional Product product = 1;
 * @return {?proto.v1.Billing.Product}
 */
proto.v1.Billing.Order.Item.prototype.getProduct = function() {
  return /** @type{?proto.v1.Billing.Product} */ (
    jspb.Message.getWrapperField(this, proto.v1.Billing.Product, 1));
};


/**
 * @param {?proto.v1.Billing.Product|undefined} value
 * @return {!proto.v1.Billing.Order.Item} returns this
*/
proto.v1.Billing.Order.Item.prototype.setProduct = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.Billing.Order.Item} returns this
 */
proto.v1.Billing.Order.Item.prototype.clearProduct = function() {
  return this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.Billing.Order.Item.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double price = 2;
 * @return {number}
 */
proto.v1.Billing.Order.Item.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Order.Item} returns this
 */
proto.v1.Billing.Order.Item.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.Billing.Order.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 created_at = 2;
 * @return {number}
 */
proto.v1.Billing.Order.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 paid_at = 3;
 * @return {number}
 */
proto.v1.Billing.Order.prototype.getPaidAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setPaidAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 state = 4;
 * @return {number}
 */
proto.v1.Billing.Order.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool online = 5;
 * @return {boolean}
 */
proto.v1.Billing.Order.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string pay_link = 20;
 * @return {string}
 */
proto.v1.Billing.Order.prototype.getPayLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setPayLink = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string invoice_link = 21;
 * @return {string}
 */
proto.v1.Billing.Order.prototype.getInvoiceLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setInvoiceLink = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string voucher_link = 22;
 * @return {string}
 */
proto.v1.Billing.Order.prototype.getVoucherLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setVoucherLink = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string web_post_form = 6;
 * @return {string}
 */
proto.v1.Billing.Order.prototype.getWebPostForm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setWebPostForm = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Item items = 7;
 * @return {!Array<!proto.v1.Billing.Order.Item>}
 */
proto.v1.Billing.Order.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.v1.Billing.Order.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.Billing.Order.Item, 7));
};


/**
 * @param {!Array<!proto.v1.Billing.Order.Item>} value
 * @return {!proto.v1.Billing.Order} returns this
*/
proto.v1.Billing.Order.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.v1.Billing.Order.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.Billing.Order.Item}
 */
proto.v1.Billing.Order.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.v1.Billing.Order.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional double price = 8;
 * @return {number}
 */
proto.v1.Billing.Order.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional Currency currency = 9;
 * @return {!proto.v1.Billing.Currency}
 */
proto.v1.Billing.Order.prototype.getCurrency = function() {
  return /** @type {!proto.v1.Billing.Currency} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.v1.Billing.Currency} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint64 seq_id = 10;
 * @return {number}
 */
proto.v1.Billing.Order.prototype.getSeqId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setSeqId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional PaySystem pay_type = 11;
 * @return {!proto.v1.Billing.PaySystem}
 */
proto.v1.Billing.Order.prototype.getPayType = function() {
  return /** @type {!proto.v1.Billing.PaySystem} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.v1.Billing.PaySystem} value
 * @return {!proto.v1.Billing.Order} returns this
 */
proto.v1.Billing.Order.prototype.setPayType = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Billing.BillingAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Billing.BillingAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Billing.BillingAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.BillingAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    kpp: jspb.Message.getFieldWithDefault(msg, 4, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 5, ""),
    addressCorespond: jspb.Message.getFieldWithDefault(msg, 6, ""),
    individual: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Billing.BillingAddress}
 */
proto.v1.Billing.BillingAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Billing.BillingAddress;
  return proto.v1.Billing.BillingAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Billing.BillingAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Billing.BillingAddress}
 */
proto.v1.Billing.BillingAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKpp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressCorespond(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIndividual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Billing.BillingAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Billing.BillingAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Billing.BillingAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Billing.BillingAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKpp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAddressCorespond();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIndividual();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.v1.Billing.BillingAddress.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.BillingAddress} returns this
 */
proto.v1.Billing.BillingAddress.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.v1.Billing.BillingAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.BillingAddress} returns this
 */
proto.v1.Billing.BillingAddress.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.v1.Billing.BillingAddress.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.BillingAddress} returns this
 */
proto.v1.Billing.BillingAddress.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string kpp = 4;
 * @return {string}
 */
proto.v1.Billing.BillingAddress.prototype.getKpp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.BillingAddress} returns this
 */
proto.v1.Billing.BillingAddress.prototype.setKpp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string phone = 5;
 * @return {string}
 */
proto.v1.Billing.BillingAddress.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.BillingAddress} returns this
 */
proto.v1.Billing.BillingAddress.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string address_corespond = 6;
 * @return {string}
 */
proto.v1.Billing.BillingAddress.prototype.getAddressCorespond = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.Billing.BillingAddress} returns this
 */
proto.v1.Billing.BillingAddress.prototype.setAddressCorespond = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool individual = 7;
 * @return {boolean}
 */
proto.v1.Billing.BillingAddress.prototype.getIndividual = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.Billing.BillingAddress} returns this
 */
proto.v1.Billing.BillingAddress.prototype.setIndividual = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


goog.object.extend(exports, proto.v1);
