// source: layer1/caller/v1/signaling.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.caller.v1.ConnectOptions', null, global);
goog.exportSymbol('proto.v1.caller.v1.ICE_Candidat', null, global);
goog.exportSymbol('proto.v1.caller.v1.ICE_Servers', null, global);
goog.exportSymbol('proto.v1.caller.v1.ICE_Servers.STUN', null, global);
goog.exportSymbol('proto.v1.caller.v1.ICE_Servers.TURN', null, global);
goog.exportSymbol('proto.v1.caller.v1.SessionDescription', null, global);
goog.exportSymbol('proto.v1.caller.v1.SessionDescription.SDP_Type', null, global);
goog.exportSymbol('proto.v1.caller.v1.Signaling', null, global);
goog.exportSymbol('proto.v1.caller.v1.Timeouts', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.SessionDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.SessionDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.SessionDescription.displayName = 'proto.v1.caller.v1.SessionDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.ICE_Candidat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.ICE_Candidat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.ICE_Candidat.displayName = 'proto.v1.caller.v1.ICE_Candidat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Signaling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Signaling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Signaling.displayName = 'proto.v1.caller.v1.Signaling';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.ICE_Servers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.caller.v1.ICE_Servers.repeatedFields_, null);
};
goog.inherits(proto.v1.caller.v1.ICE_Servers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.ICE_Servers.displayName = 'proto.v1.caller.v1.ICE_Servers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.ICE_Servers.STUN = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.ICE_Servers.STUN, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.ICE_Servers.STUN.displayName = 'proto.v1.caller.v1.ICE_Servers.STUN';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.ICE_Servers.TURN = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.ICE_Servers.TURN, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.ICE_Servers.TURN.displayName = 'proto.v1.caller.v1.ICE_Servers.TURN';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Timeouts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Timeouts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Timeouts.displayName = 'proto.v1.caller.v1.Timeouts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.ConnectOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.ConnectOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.ConnectOptions.displayName = 'proto.v1.caller.v1.ConnectOptions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.SessionDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.SessionDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.SessionDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.SessionDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.SessionDescription}
 */
proto.v1.caller.v1.SessionDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.SessionDescription;
  return proto.v1.caller.v1.SessionDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.SessionDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.SessionDescription}
 */
proto.v1.caller.v1.SessionDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {!proto.v1.caller.v1.SessionDescription.SDP_Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.SessionDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.SessionDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.SessionDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.SessionDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.v1.caller.v1.SessionDescription.SDP_Type = {
  SDP_TYPE_UNKNOWN: 0,
  SDP_TYPE_OFFER: 1,
  SDP_TYPE_ANSWER: 2,
  SDP_TYPE_PRANSWER: 3,
  SDP_TYPE_ROLLBACK: 4
};

/**
 * optional string SDP = 1;
 * @return {string}
 */
proto.v1.caller.v1.SessionDescription.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.SessionDescription} returns this
 */
proto.v1.caller.v1.SessionDescription.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SDP_Type type = 2;
 * @return {!proto.v1.caller.v1.SessionDescription.SDP_Type}
 */
proto.v1.caller.v1.SessionDescription.prototype.getType = function() {
  return /** @type {!proto.v1.caller.v1.SessionDescription.SDP_Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.v1.caller.v1.SessionDescription.SDP_Type} value
 * @return {!proto.v1.caller.v1.SessionDescription} returns this
 */
proto.v1.caller.v1.SessionDescription.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.ICE_Candidat.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.ICE_Candidat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.ICE_Candidat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Candidat.toObject = function(includeInstance, msg) {
  var f, obj = {
    ice: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.ICE_Candidat}
 */
proto.v1.caller.v1.ICE_Candidat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.ICE_Candidat;
  return proto.v1.caller.v1.ICE_Candidat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.ICE_Candidat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.ICE_Candidat}
 */
proto.v1.caller.v1.ICE_Candidat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.ICE_Candidat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.ICE_Candidat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.ICE_Candidat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Candidat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIce();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ICE = 1;
 * @return {string}
 */
proto.v1.caller.v1.ICE_Candidat.prototype.getIce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.ICE_Candidat} returns this
 */
proto.v1.caller.v1.ICE_Candidat.prototype.setIce = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Signaling.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Signaling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Signaling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Signaling.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: (f = msg.getSdp()) && proto.v1.caller.v1.SessionDescription.toObject(includeInstance, f),
    ice: (f = msg.getIce()) && proto.v1.caller.v1.ICE_Candidat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Signaling}
 */
proto.v1.caller.v1.Signaling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Signaling;
  return proto.v1.caller.v1.Signaling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Signaling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Signaling}
 */
proto.v1.caller.v1.Signaling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.caller.v1.SessionDescription;
      reader.readMessage(value,proto.v1.caller.v1.SessionDescription.deserializeBinaryFromReader);
      msg.setSdp(value);
      break;
    case 2:
      var value = new proto.v1.caller.v1.ICE_Candidat;
      reader.readMessage(value,proto.v1.caller.v1.ICE_Candidat.deserializeBinaryFromReader);
      msg.setIce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Signaling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Signaling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Signaling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Signaling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.caller.v1.SessionDescription.serializeBinaryToWriter
    );
  }
  f = message.getIce();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.caller.v1.ICE_Candidat.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionDescription SDP = 1;
 * @return {?proto.v1.caller.v1.SessionDescription}
 */
proto.v1.caller.v1.Signaling.prototype.getSdp = function() {
  return /** @type{?proto.v1.caller.v1.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.SessionDescription, 1));
};


/**
 * @param {?proto.v1.caller.v1.SessionDescription|undefined} value
 * @return {!proto.v1.caller.v1.Signaling} returns this
*/
proto.v1.caller.v1.Signaling.prototype.setSdp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Signaling} returns this
 */
proto.v1.caller.v1.Signaling.prototype.clearSdp = function() {
  return this.setSdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Signaling.prototype.hasSdp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ICE_Candidat ICE = 2;
 * @return {?proto.v1.caller.v1.ICE_Candidat}
 */
proto.v1.caller.v1.Signaling.prototype.getIce = function() {
  return /** @type{?proto.v1.caller.v1.ICE_Candidat} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.ICE_Candidat, 2));
};


/**
 * @param {?proto.v1.caller.v1.ICE_Candidat|undefined} value
 * @return {!proto.v1.caller.v1.Signaling} returns this
*/
proto.v1.caller.v1.Signaling.prototype.setIce = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Signaling} returns this
 */
proto.v1.caller.v1.Signaling.prototype.clearIce = function() {
  return this.setIce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Signaling.prototype.hasIce = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.caller.v1.ICE_Servers.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.ICE_Servers.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.ICE_Servers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.ICE_Servers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Servers.toObject = function(includeInstance, msg) {
  var f, obj = {
    stunServersList: jspb.Message.toObjectList(msg.getStunServersList(),
    proto.v1.caller.v1.ICE_Servers.STUN.toObject, includeInstance),
    turnServersList: jspb.Message.toObjectList(msg.getTurnServersList(),
    proto.v1.caller.v1.ICE_Servers.TURN.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.ICE_Servers}
 */
proto.v1.caller.v1.ICE_Servers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.ICE_Servers;
  return proto.v1.caller.v1.ICE_Servers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.ICE_Servers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.ICE_Servers}
 */
proto.v1.caller.v1.ICE_Servers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.caller.v1.ICE_Servers.STUN;
      reader.readMessage(value,proto.v1.caller.v1.ICE_Servers.STUN.deserializeBinaryFromReader);
      msg.addStunServers(value);
      break;
    case 2:
      var value = new proto.v1.caller.v1.ICE_Servers.TURN;
      reader.readMessage(value,proto.v1.caller.v1.ICE_Servers.TURN.deserializeBinaryFromReader);
      msg.addTurnServers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.ICE_Servers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.ICE_Servers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.ICE_Servers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Servers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStunServersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.v1.caller.v1.ICE_Servers.STUN.serializeBinaryToWriter
    );
  }
  f = message.getTurnServersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v1.caller.v1.ICE_Servers.TURN.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.ICE_Servers.STUN.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.ICE_Servers.STUN.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.ICE_Servers.STUN} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Servers.STUN.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.ICE_Servers.STUN}
 */
proto.v1.caller.v1.ICE_Servers.STUN.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.ICE_Servers.STUN;
  return proto.v1.caller.v1.ICE_Servers.STUN.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.ICE_Servers.STUN} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.ICE_Servers.STUN}
 */
proto.v1.caller.v1.ICE_Servers.STUN.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.ICE_Servers.STUN.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.ICE_Servers.STUN.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.ICE_Servers.STUN} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Servers.STUN.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.v1.caller.v1.ICE_Servers.STUN.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.ICE_Servers.STUN} returns this
 */
proto.v1.caller.v1.ICE_Servers.STUN.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.ICE_Servers.TURN.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.ICE_Servers.TURN} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Servers.TURN.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    credential: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.ICE_Servers.TURN}
 */
proto.v1.caller.v1.ICE_Servers.TURN.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.ICE_Servers.TURN;
  return proto.v1.caller.v1.ICE_Servers.TURN.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.ICE_Servers.TURN} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.ICE_Servers.TURN}
 */
proto.v1.caller.v1.ICE_Servers.TURN.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.ICE_Servers.TURN.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.ICE_Servers.TURN} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ICE_Servers.TURN.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCredential();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.ICE_Servers.TURN} returns this
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.ICE_Servers.TURN} returns this
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string credential = 3;
 * @return {string}
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.getCredential = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.ICE_Servers.TURN} returns this
 */
proto.v1.caller.v1.ICE_Servers.TURN.prototype.setCredential = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated STUN stun_servers = 1;
 * @return {!Array<!proto.v1.caller.v1.ICE_Servers.STUN>}
 */
proto.v1.caller.v1.ICE_Servers.prototype.getStunServersList = function() {
  return /** @type{!Array<!proto.v1.caller.v1.ICE_Servers.STUN>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.caller.v1.ICE_Servers.STUN, 1));
};


/**
 * @param {!Array<!proto.v1.caller.v1.ICE_Servers.STUN>} value
 * @return {!proto.v1.caller.v1.ICE_Servers} returns this
*/
proto.v1.caller.v1.ICE_Servers.prototype.setStunServersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.v1.caller.v1.ICE_Servers.STUN=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.caller.v1.ICE_Servers.STUN}
 */
proto.v1.caller.v1.ICE_Servers.prototype.addStunServers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.v1.caller.v1.ICE_Servers.STUN, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.caller.v1.ICE_Servers} returns this
 */
proto.v1.caller.v1.ICE_Servers.prototype.clearStunServersList = function() {
  return this.setStunServersList([]);
};


/**
 * repeated TURN turn_servers = 2;
 * @return {!Array<!proto.v1.caller.v1.ICE_Servers.TURN>}
 */
proto.v1.caller.v1.ICE_Servers.prototype.getTurnServersList = function() {
  return /** @type{!Array<!proto.v1.caller.v1.ICE_Servers.TURN>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.caller.v1.ICE_Servers.TURN, 2));
};


/**
 * @param {!Array<!proto.v1.caller.v1.ICE_Servers.TURN>} value
 * @return {!proto.v1.caller.v1.ICE_Servers} returns this
*/
proto.v1.caller.v1.ICE_Servers.prototype.setTurnServersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v1.caller.v1.ICE_Servers.TURN=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.caller.v1.ICE_Servers.TURN}
 */
proto.v1.caller.v1.ICE_Servers.prototype.addTurnServers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v1.caller.v1.ICE_Servers.TURN, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.caller.v1.ICE_Servers} returns this
 */
proto.v1.caller.v1.ICE_Servers.prototype.clearTurnServersList = function() {
  return this.setTurnServersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Timeouts.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Timeouts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Timeouts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Timeouts.toObject = function(includeInstance, msg) {
  var f, obj = {
    pingtimeout: jspb.Message.getFieldWithDefault(msg, 1, 0),
    calltimeout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inittimeout: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Timeouts}
 */
proto.v1.caller.v1.Timeouts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Timeouts;
  return proto.v1.caller.v1.Timeouts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Timeouts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Timeouts}
 */
proto.v1.caller.v1.Timeouts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingtimeout(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCalltimeout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInittimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Timeouts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Timeouts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Timeouts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Timeouts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPingtimeout();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCalltimeout();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInittimeout();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 PingTimeout = 1;
 * @return {number}
 */
proto.v1.caller.v1.Timeouts.prototype.getPingtimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.caller.v1.Timeouts} returns this
 */
proto.v1.caller.v1.Timeouts.prototype.setPingtimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 CallTimeout = 2;
 * @return {number}
 */
proto.v1.caller.v1.Timeouts.prototype.getCalltimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.caller.v1.Timeouts} returns this
 */
proto.v1.caller.v1.Timeouts.prototype.setCalltimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 InitTimeout = 3;
 * @return {number}
 */
proto.v1.caller.v1.Timeouts.prototype.getInittimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.caller.v1.Timeouts} returns this
 */
proto.v1.caller.v1.Timeouts.prototype.setInittimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.ConnectOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.ConnectOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.ConnectOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ConnectOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    servers: (f = msg.getServers()) && proto.v1.caller.v1.ICE_Servers.toObject(includeInstance, f),
    callerService: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeouts: (f = msg.getTimeouts()) && proto.v1.caller.v1.Timeouts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.ConnectOptions}
 */
proto.v1.caller.v1.ConnectOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.ConnectOptions;
  return proto.v1.caller.v1.ConnectOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.ConnectOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.ConnectOptions}
 */
proto.v1.caller.v1.ConnectOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.caller.v1.ICE_Servers;
      reader.readMessage(value,proto.v1.caller.v1.ICE_Servers.deserializeBinaryFromReader);
      msg.setServers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallerService(value);
      break;
    case 3:
      var value = new proto.v1.caller.v1.Timeouts;
      reader.readMessage(value,proto.v1.caller.v1.Timeouts.deserializeBinaryFromReader);
      msg.setTimeouts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.ConnectOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.ConnectOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.ConnectOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.ConnectOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.caller.v1.ICE_Servers.serializeBinaryToWriter
    );
  }
  f = message.getCallerService();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeouts();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.caller.v1.Timeouts.serializeBinaryToWriter
    );
  }
};


/**
 * optional ICE_Servers servers = 1;
 * @return {?proto.v1.caller.v1.ICE_Servers}
 */
proto.v1.caller.v1.ConnectOptions.prototype.getServers = function() {
  return /** @type{?proto.v1.caller.v1.ICE_Servers} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.ICE_Servers, 1));
};


/**
 * @param {?proto.v1.caller.v1.ICE_Servers|undefined} value
 * @return {!proto.v1.caller.v1.ConnectOptions} returns this
*/
proto.v1.caller.v1.ConnectOptions.prototype.setServers = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.ConnectOptions} returns this
 */
proto.v1.caller.v1.ConnectOptions.prototype.clearServers = function() {
  return this.setServers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.ConnectOptions.prototype.hasServers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string caller_service = 2;
 * @return {string}
 */
proto.v1.caller.v1.ConnectOptions.prototype.getCallerService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.ConnectOptions} returns this
 */
proto.v1.caller.v1.ConnectOptions.prototype.setCallerService = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Timeouts timeouts = 3;
 * @return {?proto.v1.caller.v1.Timeouts}
 */
proto.v1.caller.v1.ConnectOptions.prototype.getTimeouts = function() {
  return /** @type{?proto.v1.caller.v1.Timeouts} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Timeouts, 3));
};


/**
 * @param {?proto.v1.caller.v1.Timeouts|undefined} value
 * @return {!proto.v1.caller.v1.ConnectOptions} returns this
*/
proto.v1.caller.v1.ConnectOptions.prototype.setTimeouts = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.ConnectOptions} returns this
 */
proto.v1.caller.v1.ConnectOptions.prototype.clearTimeouts = function() {
  return this.setTimeouts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.ConnectOptions.prototype.hasTimeouts = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.v1.caller.v1);
