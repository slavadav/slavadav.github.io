// source: layer1/caller/v1/socket/caller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var layer1_caller_v1_session_pb = require('../../../../layer1/caller/v1/session_pb.js');
goog.object.extend(proto, layer1_caller_v1_session_pb);
var layer1_caller_v1_signaling_pb = require('../../../../layer1/caller/v1/signaling_pb.js');
goog.object.extend(proto, layer1_caller_v1_signaling_pb);
var layer1_users_pb = require('../../../../layer1/users_pb.js');
goog.object.extend(proto, layer1_users_pb);
var layer1_messages_pb = require('../../../../layer1/messages_pb.js');
goog.object.extend(proto, layer1_messages_pb);
goog.exportSymbol('proto.v1.caller.v1.Error', null, global);
goog.exportSymbol('proto.v1.caller.v1.RTCInfo', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request.Methods', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request.Methods.CancelCall', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request.Methods.GetCall', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request.Methods.Init', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request.Methods.Ping', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request.Methods.RTCUpdate', null, global);
goog.exportSymbol('proto.v1.caller.v1.Request.PayloadCase', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.PayloadCase', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.Responses', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.Responses.Auth', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.Responses.Pong', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.Updates', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.Updates.CallEnded', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.Updates.CallEnded.Cause', null, global);
goog.exportSymbol('proto.v1.caller.v1.Response.Updates.RTC_state', null, global);
goog.exportSymbol('proto.v1.caller.v1.Session', null, global);
goog.exportSymbol('proto.v1.caller.v1.Session.Description', null, global);
goog.exportSymbol('proto.v1.caller.v1.Session.Participants', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Session.displayName = 'proto.v1.caller.v1.Session';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Session.Description = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Session.Description, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Session.Description.displayName = 'proto.v1.caller.v1.Session.Description';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Session.Participants = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.caller.v1.Session.Participants.repeatedFields_, null);
};
goog.inherits(proto.v1.caller.v1.Session.Participants, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Session.Participants.displayName = 'proto.v1.caller.v1.Session.Participants';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.RTCInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.RTCInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.RTCInfo.displayName = 'proto.v1.caller.v1.RTCInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.caller.v1.Request.oneofGroups_);
};
goog.inherits(proto.v1.caller.v1.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Request.displayName = 'proto.v1.caller.v1.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Request.Methods = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Request.Methods, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Request.Methods.displayName = 'proto.v1.caller.v1.Request.Methods';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Request.Methods.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Request.Methods.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Request.Methods.Ping.displayName = 'proto.v1.caller.v1.Request.Methods.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Request.Methods.Init = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Request.Methods.Init, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Request.Methods.Init.displayName = 'proto.v1.caller.v1.Request.Methods.Init';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Request.Methods.GetCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Request.Methods.GetCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Request.Methods.GetCall.displayName = 'proto.v1.caller.v1.Request.Methods.GetCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Request.Methods.RTCUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Request.Methods.RTCUpdate.displayName = 'proto.v1.caller.v1.Request.Methods.RTCUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Request.Methods.CancelCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Request.Methods.CancelCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Request.Methods.CancelCall.displayName = 'proto.v1.caller.v1.Request.Methods.CancelCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Error.displayName = 'proto.v1.caller.v1.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.caller.v1.Response.oneofGroups_);
};
goog.inherits(proto.v1.caller.v1.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Response.displayName = 'proto.v1.caller.v1.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Response.Responses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Response.Responses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Response.Responses.displayName = 'proto.v1.caller.v1.Response.Responses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Response.Responses.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Response.Responses.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Response.Responses.Pong.displayName = 'proto.v1.caller.v1.Response.Responses.Pong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Response.Responses.Auth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Response.Responses.Auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Response.Responses.Auth.displayName = 'proto.v1.caller.v1.Response.Responses.Auth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Response.Updates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Response.Updates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Response.Updates.displayName = 'proto.v1.caller.v1.Response.Updates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Response.Updates.RTC_state = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Response.Updates.RTC_state, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Response.Updates.RTC_state.displayName = 'proto.v1.caller.v1.Response.Updates.RTC_state';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.caller.v1.Response.Updates.CallEnded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.caller.v1.Response.Updates.CallEnded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.caller.v1.Response.Updates.CallEnded.displayName = 'proto.v1.caller.v1.Response.Updates.CallEnded';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Session} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && layer1_caller_v1_session_pb.SessionInfo.toObject(includeInstance, f),
    desc: (f = msg.getDesc()) && proto.v1.caller.v1.Session.Description.toObject(includeInstance, f),
    participants: (f = msg.getParticipants()) && proto.v1.caller.v1.Session.Participants.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Session}
 */
proto.v1.caller.v1.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Session;
  return proto.v1.caller.v1.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Session}
 */
proto.v1.caller.v1.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new layer1_caller_v1_session_pb.SessionInfo;
      reader.readMessage(value,layer1_caller_v1_session_pb.SessionInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new proto.v1.caller.v1.Session.Description;
      reader.readMessage(value,proto.v1.caller.v1.Session.Description.deserializeBinaryFromReader);
      msg.setDesc(value);
      break;
    case 3:
      var value = new proto.v1.caller.v1.Session.Participants;
      reader.readMessage(value,proto.v1.caller.v1.Session.Participants.deserializeBinaryFromReader);
      msg.setParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Session.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      layer1_caller_v1_session_pb.SessionInfo.serializeBinaryToWriter
    );
  }
  f = message.getDesc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.caller.v1.Session.Description.serializeBinaryToWriter
    );
  }
  f = message.getParticipants();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.caller.v1.Session.Participants.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Session.Description.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Session.Description.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Session.Description} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Session.Description.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && layer1_users_pb.Users.Account.toObject(includeInstance, f),
    peer: (f = msg.getPeer()) && layer1_messages_pb.Messages.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Session.Description}
 */
proto.v1.caller.v1.Session.Description.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Session.Description;
  return proto.v1.caller.v1.Session.Description.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Session.Description} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Session.Description}
 */
proto.v1.caller.v1.Session.Description.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new layer1_users_pb.Users.Account;
      reader.readMessage(value,layer1_users_pb.Users.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new layer1_messages_pb.Messages.Peer;
      reader.readMessage(value,layer1_messages_pb.Messages.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Session.Description.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Session.Description.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Session.Description} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Session.Description.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      layer1_users_pb.Users.Account.serializeBinaryToWriter
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      layer1_messages_pb.Messages.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional v1.Users.Account account = 1;
 * @return {?proto.v1.Users.Account}
 */
proto.v1.caller.v1.Session.Description.prototype.getAccount = function() {
  return /** @type{?proto.v1.Users.Account} */ (
    jspb.Message.getWrapperField(this, layer1_users_pb.Users.Account, 1));
};


/**
 * @param {?proto.v1.Users.Account|undefined} value
 * @return {!proto.v1.caller.v1.Session.Description} returns this
*/
proto.v1.caller.v1.Session.Description.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Session.Description} returns this
 */
proto.v1.caller.v1.Session.Description.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Session.Description.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional v1.Messages.Peer peer = 2;
 * @return {?proto.v1.Messages.Peer}
 */
proto.v1.caller.v1.Session.Description.prototype.getPeer = function() {
  return /** @type{?proto.v1.Messages.Peer} */ (
    jspb.Message.getWrapperField(this, layer1_messages_pb.Messages.Peer, 2));
};


/**
 * @param {?proto.v1.Messages.Peer|undefined} value
 * @return {!proto.v1.caller.v1.Session.Description} returns this
*/
proto.v1.caller.v1.Session.Description.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Session.Description} returns this
 */
proto.v1.caller.v1.Session.Description.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Session.Description.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.caller.v1.Session.Participants.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Session.Participants.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Session.Participants.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Session.Participants} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Session.Participants.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    layer1_users_pb.Users.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Session.Participants}
 */
proto.v1.caller.v1.Session.Participants.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Session.Participants;
  return proto.v1.caller.v1.Session.Participants.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Session.Participants} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Session.Participants}
 */
proto.v1.caller.v1.Session.Participants.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new layer1_users_pb.Users.User;
      reader.readMessage(value,layer1_users_pb.Users.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Session.Participants.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Session.Participants.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Session.Participants} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Session.Participants.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      layer1_users_pb.Users.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated v1.Users.User users = 1;
 * @return {!Array<!proto.v1.Users.User>}
 */
proto.v1.caller.v1.Session.Participants.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.v1.Users.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, layer1_users_pb.Users.User, 1));
};


/**
 * @param {!Array<!proto.v1.Users.User>} value
 * @return {!proto.v1.caller.v1.Session.Participants} returns this
*/
proto.v1.caller.v1.Session.Participants.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.v1.Users.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.Users.User}
 */
proto.v1.caller.v1.Session.Participants.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.v1.Users.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.caller.v1.Session.Participants} returns this
 */
proto.v1.caller.v1.Session.Participants.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * optional SessionInfo info = 1;
 * @return {?proto.v1.caller.v1.SessionInfo}
 */
proto.v1.caller.v1.Session.prototype.getInfo = function() {
  return /** @type{?proto.v1.caller.v1.SessionInfo} */ (
    jspb.Message.getWrapperField(this, layer1_caller_v1_session_pb.SessionInfo, 1));
};


/**
 * @param {?proto.v1.caller.v1.SessionInfo|undefined} value
 * @return {!proto.v1.caller.v1.Session} returns this
*/
proto.v1.caller.v1.Session.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Session} returns this
 */
proto.v1.caller.v1.Session.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Session.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Description desc = 2;
 * @return {?proto.v1.caller.v1.Session.Description}
 */
proto.v1.caller.v1.Session.prototype.getDesc = function() {
  return /** @type{?proto.v1.caller.v1.Session.Description} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Session.Description, 2));
};


/**
 * @param {?proto.v1.caller.v1.Session.Description|undefined} value
 * @return {!proto.v1.caller.v1.Session} returns this
*/
proto.v1.caller.v1.Session.prototype.setDesc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Session} returns this
 */
proto.v1.caller.v1.Session.prototype.clearDesc = function() {
  return this.setDesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Session.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Participants participants = 3;
 * @return {?proto.v1.caller.v1.Session.Participants}
 */
proto.v1.caller.v1.Session.prototype.getParticipants = function() {
  return /** @type{?proto.v1.caller.v1.Session.Participants} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Session.Participants, 3));
};


/**
 * @param {?proto.v1.caller.v1.Session.Participants|undefined} value
 * @return {!proto.v1.caller.v1.Session} returns this
*/
proto.v1.caller.v1.Session.prototype.setParticipants = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Session} returns this
 */
proto.v1.caller.v1.Session.prototype.clearParticipants = function() {
  return this.setParticipants(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Session.prototype.hasParticipants = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.RTCInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.RTCInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.RTCInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.RTCInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionInfo: (f = msg.getSessionInfo()) && proto.v1.caller.v1.Session.toObject(includeInstance, f),
    options: (f = msg.getOptions()) && layer1_caller_v1_signaling_pb.ConnectOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.RTCInfo}
 */
proto.v1.caller.v1.RTCInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.RTCInfo;
  return proto.v1.caller.v1.RTCInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.RTCInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.RTCInfo}
 */
proto.v1.caller.v1.RTCInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.caller.v1.Session;
      reader.readMessage(value,proto.v1.caller.v1.Session.deserializeBinaryFromReader);
      msg.setSessionInfo(value);
      break;
    case 2:
      var value = new layer1_caller_v1_signaling_pb.ConnectOptions;
      reader.readMessage(value,layer1_caller_v1_signaling_pb.ConnectOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.RTCInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.RTCInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.RTCInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.RTCInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.caller.v1.Session.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      layer1_caller_v1_signaling_pb.ConnectOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional Session session_info = 1;
 * @return {?proto.v1.caller.v1.Session}
 */
proto.v1.caller.v1.RTCInfo.prototype.getSessionInfo = function() {
  return /** @type{?proto.v1.caller.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Session, 1));
};


/**
 * @param {?proto.v1.caller.v1.Session|undefined} value
 * @return {!proto.v1.caller.v1.RTCInfo} returns this
*/
proto.v1.caller.v1.RTCInfo.prototype.setSessionInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.RTCInfo} returns this
 */
proto.v1.caller.v1.RTCInfo.prototype.clearSessionInfo = function() {
  return this.setSessionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.RTCInfo.prototype.hasSessionInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConnectOptions options = 2;
 * @return {?proto.v1.caller.v1.ConnectOptions}
 */
proto.v1.caller.v1.RTCInfo.prototype.getOptions = function() {
  return /** @type{?proto.v1.caller.v1.ConnectOptions} */ (
    jspb.Message.getWrapperField(this, layer1_caller_v1_signaling_pb.ConnectOptions, 2));
};


/**
 * @param {?proto.v1.caller.v1.ConnectOptions|undefined} value
 * @return {!proto.v1.caller.v1.RTCInfo} returns this
*/
proto.v1.caller.v1.RTCInfo.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.RTCInfo} returns this
 */
proto.v1.caller.v1.RTCInfo.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.RTCInfo.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.caller.v1.Request.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.v1.caller.v1.Request.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  INIT: 2,
  PING: 3,
  GET_CALL: 4,
  UPDATE_RTC_STATE: 5,
  HANG_UP: 6
};

/**
 * @return {proto.v1.caller.v1.Request.PayloadCase}
 */
proto.v1.caller.v1.Request.prototype.getPayloadCase = function() {
  return /** @type {proto.v1.caller.v1.Request.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.v1.caller.v1.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    init: (f = msg.getInit()) && proto.v1.caller.v1.Request.Methods.Init.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.v1.caller.v1.Request.Methods.Ping.toObject(includeInstance, f),
    getCall: (f = msg.getGetCall()) && proto.v1.caller.v1.Request.Methods.GetCall.toObject(includeInstance, f),
    updateRtcState: (f = msg.getUpdateRtcState()) && proto.v1.caller.v1.Request.Methods.RTCUpdate.toObject(includeInstance, f),
    hangUp: (f = msg.getHangUp()) && proto.v1.caller.v1.Request.Methods.CancelCall.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Request}
 */
proto.v1.caller.v1.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Request;
  return proto.v1.caller.v1.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Request}
 */
proto.v1.caller.v1.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.v1.caller.v1.Request.Methods.Init;
      reader.readMessage(value,proto.v1.caller.v1.Request.Methods.Init.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 3:
      var value = new proto.v1.caller.v1.Request.Methods.Ping;
      reader.readMessage(value,proto.v1.caller.v1.Request.Methods.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 4:
      var value = new proto.v1.caller.v1.Request.Methods.GetCall;
      reader.readMessage(value,proto.v1.caller.v1.Request.Methods.GetCall.deserializeBinaryFromReader);
      msg.setGetCall(value);
      break;
    case 5:
      var value = new proto.v1.caller.v1.Request.Methods.RTCUpdate;
      reader.readMessage(value,proto.v1.caller.v1.Request.Methods.RTCUpdate.deserializeBinaryFromReader);
      msg.setUpdateRtcState(value);
      break;
    case 6:
      var value = new proto.v1.caller.v1.Request.Methods.CancelCall;
      reader.readMessage(value,proto.v1.caller.v1.Request.Methods.CancelCall.deserializeBinaryFromReader);
      msg.setHangUp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.caller.v1.Request.Methods.Init.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.caller.v1.Request.Methods.Ping.serializeBinaryToWriter
    );
  }
  f = message.getGetCall();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.caller.v1.Request.Methods.GetCall.serializeBinaryToWriter
    );
  }
  f = message.getUpdateRtcState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.v1.caller.v1.Request.Methods.RTCUpdate.serializeBinaryToWriter
    );
  }
  f = message.getHangUp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.v1.caller.v1.Request.Methods.CancelCall.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Request.Methods.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Request.Methods.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Request.Methods} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Request.Methods}
 */
proto.v1.caller.v1.Request.Methods.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Request.Methods;
  return proto.v1.caller.v1.Request.Methods.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Request.Methods} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Request.Methods}
 */
proto.v1.caller.v1.Request.Methods.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Request.Methods.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Request.Methods.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Request.Methods} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Request.Methods.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Request.Methods.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Request.Methods.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Request.Methods.Ping}
 */
proto.v1.caller.v1.Request.Methods.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Request.Methods.Ping;
  return proto.v1.caller.v1.Request.Methods.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Request.Methods.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Request.Methods.Ping}
 */
proto.v1.caller.v1.Request.Methods.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Request.Methods.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Request.Methods.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Request.Methods.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Request.Methods.Init.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Request.Methods.Init.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Request.Methods.Init} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.Init.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Request.Methods.Init}
 */
proto.v1.caller.v1.Request.Methods.Init.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Request.Methods.Init;
  return proto.v1.caller.v1.Request.Methods.Init.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Request.Methods.Init} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Request.Methods.Init}
 */
proto.v1.caller.v1.Request.Methods.Init.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Request.Methods.Init.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Request.Methods.Init.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Request.Methods.Init} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.Init.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.v1.caller.v1.Request.Methods.Init.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Request.Methods.Init} returns this
 */
proto.v1.caller.v1.Request.Methods.Init.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Request.Methods.GetCall.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Request.Methods.GetCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Request.Methods.GetCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.GetCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Request.Methods.GetCall}
 */
proto.v1.caller.v1.Request.Methods.GetCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Request.Methods.GetCall;
  return proto.v1.caller.v1.Request.Methods.GetCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Request.Methods.GetCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Request.Methods.GetCall}
 */
proto.v1.caller.v1.Request.Methods.GetCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Request.Methods.GetCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Request.Methods.GetCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Request.Methods.GetCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.GetCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.v1.caller.v1.Request.Methods.GetCall.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Request.Methods.GetCall} returns this
 */
proto.v1.caller.v1.Request.Methods.GetCall.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Request.Methods.RTCUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Request.Methods.RTCUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rtcState: (f = msg.getRtcState()) && layer1_caller_v1_signaling_pb.Signaling.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Request.Methods.RTCUpdate}
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Request.Methods.RTCUpdate;
  return proto.v1.caller.v1.Request.Methods.RTCUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Request.Methods.RTCUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Request.Methods.RTCUpdate}
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new layer1_caller_v1_signaling_pb.Signaling;
      reader.readMessage(value,layer1_caller_v1_signaling_pb.Signaling.deserializeBinaryFromReader);
      msg.setRtcState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Request.Methods.RTCUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Request.Methods.RTCUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRtcState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      layer1_caller_v1_signaling_pb.Signaling.serializeBinaryToWriter
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Request.Methods.RTCUpdate} returns this
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Signaling rtc_state = 2;
 * @return {?proto.v1.caller.v1.Signaling}
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.getRtcState = function() {
  return /** @type{?proto.v1.caller.v1.Signaling} */ (
    jspb.Message.getWrapperField(this, layer1_caller_v1_signaling_pb.Signaling, 2));
};


/**
 * @param {?proto.v1.caller.v1.Signaling|undefined} value
 * @return {!proto.v1.caller.v1.Request.Methods.RTCUpdate} returns this
*/
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.setRtcState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Request.Methods.RTCUpdate} returns this
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.clearRtcState = function() {
  return this.setRtcState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Request.Methods.RTCUpdate.prototype.hasRtcState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Request.Methods.CancelCall.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Request.Methods.CancelCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Request.Methods.CancelCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.CancelCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Request.Methods.CancelCall}
 */
proto.v1.caller.v1.Request.Methods.CancelCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Request.Methods.CancelCall;
  return proto.v1.caller.v1.Request.Methods.CancelCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Request.Methods.CancelCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Request.Methods.CancelCall}
 */
proto.v1.caller.v1.Request.Methods.CancelCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Request.Methods.CancelCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Request.Methods.CancelCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Request.Methods.CancelCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Request.Methods.CancelCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.v1.caller.v1.Request.Methods.CancelCall.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Request.Methods.CancelCall} returns this
 */
proto.v1.caller.v1.Request.Methods.CancelCall.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.v1.caller.v1.Request.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.caller.v1.Request} returns this
 */
proto.v1.caller.v1.Request.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Methods.Init init = 2;
 * @return {?proto.v1.caller.v1.Request.Methods.Init}
 */
proto.v1.caller.v1.Request.prototype.getInit = function() {
  return /** @type{?proto.v1.caller.v1.Request.Methods.Init} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Request.Methods.Init, 2));
};


/**
 * @param {?proto.v1.caller.v1.Request.Methods.Init|undefined} value
 * @return {!proto.v1.caller.v1.Request} returns this
*/
proto.v1.caller.v1.Request.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.v1.caller.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Request} returns this
 */
proto.v1.caller.v1.Request.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Request.prototype.hasInit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Methods.Ping ping = 3;
 * @return {?proto.v1.caller.v1.Request.Methods.Ping}
 */
proto.v1.caller.v1.Request.prototype.getPing = function() {
  return /** @type{?proto.v1.caller.v1.Request.Methods.Ping} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Request.Methods.Ping, 3));
};


/**
 * @param {?proto.v1.caller.v1.Request.Methods.Ping|undefined} value
 * @return {!proto.v1.caller.v1.Request} returns this
*/
proto.v1.caller.v1.Request.prototype.setPing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.v1.caller.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Request} returns this
 */
proto.v1.caller.v1.Request.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Request.prototype.hasPing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Methods.GetCall get_call = 4;
 * @return {?proto.v1.caller.v1.Request.Methods.GetCall}
 */
proto.v1.caller.v1.Request.prototype.getGetCall = function() {
  return /** @type{?proto.v1.caller.v1.Request.Methods.GetCall} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Request.Methods.GetCall, 4));
};


/**
 * @param {?proto.v1.caller.v1.Request.Methods.GetCall|undefined} value
 * @return {!proto.v1.caller.v1.Request} returns this
*/
proto.v1.caller.v1.Request.prototype.setGetCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.v1.caller.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Request} returns this
 */
proto.v1.caller.v1.Request.prototype.clearGetCall = function() {
  return this.setGetCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Request.prototype.hasGetCall = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Methods.RTCUpdate update_rtc_state = 5;
 * @return {?proto.v1.caller.v1.Request.Methods.RTCUpdate}
 */
proto.v1.caller.v1.Request.prototype.getUpdateRtcState = function() {
  return /** @type{?proto.v1.caller.v1.Request.Methods.RTCUpdate} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Request.Methods.RTCUpdate, 5));
};


/**
 * @param {?proto.v1.caller.v1.Request.Methods.RTCUpdate|undefined} value
 * @return {!proto.v1.caller.v1.Request} returns this
*/
proto.v1.caller.v1.Request.prototype.setUpdateRtcState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.v1.caller.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Request} returns this
 */
proto.v1.caller.v1.Request.prototype.clearUpdateRtcState = function() {
  return this.setUpdateRtcState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Request.prototype.hasUpdateRtcState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Methods.CancelCall hang_up = 6;
 * @return {?proto.v1.caller.v1.Request.Methods.CancelCall}
 */
proto.v1.caller.v1.Request.prototype.getHangUp = function() {
  return /** @type{?proto.v1.caller.v1.Request.Methods.CancelCall} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Request.Methods.CancelCall, 6));
};


/**
 * @param {?proto.v1.caller.v1.Request.Methods.CancelCall|undefined} value
 * @return {!proto.v1.caller.v1.Request} returns this
*/
proto.v1.caller.v1.Request.prototype.setHangUp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.v1.caller.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Request} returns this
 */
proto.v1.caller.v1.Request.prototype.clearHangUp = function() {
  return this.setHangUp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Request.prototype.hasHangUp = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Error}
 */
proto.v1.caller.v1.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Error;
  return proto.v1.caller.v1.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Error}
 */
proto.v1.caller.v1.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.caller.v1.Error.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Error} returns this
 */
proto.v1.caller.v1.Error.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.v1.caller.v1.Error.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Error} returns this
 */
proto.v1.caller.v1.Error.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.v1.caller.v1.Error.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Error} returns this
 */
proto.v1.caller.v1.Error.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.caller.v1.Response.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.v1.caller.v1.Response.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PONG: 2,
  RTC_INFO: 3,
  ERROR: 4,
  RTC_UPDATED: 5,
  CALL_ENDED: 6
};

/**
 * @return {proto.v1.caller.v1.Response.PayloadCase}
 */
proto.v1.caller.v1.Response.prototype.getPayloadCase = function() {
  return /** @type {proto.v1.caller.v1.Response.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.v1.caller.v1.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pong: (f = msg.getPong()) && proto.v1.caller.v1.Response.Responses.Pong.toObject(includeInstance, f),
    rtcInfo: (f = msg.getRtcInfo()) && proto.v1.caller.v1.RTCInfo.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.v1.caller.v1.Error.toObject(includeInstance, f),
    rtcUpdated: (f = msg.getRtcUpdated()) && proto.v1.caller.v1.Response.Updates.RTC_state.toObject(includeInstance, f),
    callEnded: (f = msg.getCallEnded()) && proto.v1.caller.v1.Response.Updates.CallEnded.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Response}
 */
proto.v1.caller.v1.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Response;
  return proto.v1.caller.v1.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Response}
 */
proto.v1.caller.v1.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.v1.caller.v1.Response.Responses.Pong;
      reader.readMessage(value,proto.v1.caller.v1.Response.Responses.Pong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    case 3:
      var value = new proto.v1.caller.v1.RTCInfo;
      reader.readMessage(value,proto.v1.caller.v1.RTCInfo.deserializeBinaryFromReader);
      msg.setRtcInfo(value);
      break;
    case 4:
      var value = new proto.v1.caller.v1.Error;
      reader.readMessage(value,proto.v1.caller.v1.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 5:
      var value = new proto.v1.caller.v1.Response.Updates.RTC_state;
      reader.readMessage(value,proto.v1.caller.v1.Response.Updates.RTC_state.deserializeBinaryFromReader);
      msg.setRtcUpdated(value);
      break;
    case 6:
      var value = new proto.v1.caller.v1.Response.Updates.CallEnded;
      reader.readMessage(value,proto.v1.caller.v1.Response.Updates.CallEnded.deserializeBinaryFromReader);
      msg.setCallEnded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.caller.v1.Response.Responses.Pong.serializeBinaryToWriter
    );
  }
  f = message.getRtcInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.caller.v1.RTCInfo.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.caller.v1.Error.serializeBinaryToWriter
    );
  }
  f = message.getRtcUpdated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.v1.caller.v1.Response.Updates.RTC_state.serializeBinaryToWriter
    );
  }
  f = message.getCallEnded();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.v1.caller.v1.Response.Updates.CallEnded.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Response.Responses.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Response.Responses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Response.Responses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Responses.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Response.Responses}
 */
proto.v1.caller.v1.Response.Responses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Response.Responses;
  return proto.v1.caller.v1.Response.Responses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Response.Responses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Response.Responses}
 */
proto.v1.caller.v1.Response.Responses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Response.Responses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Response.Responses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Response.Responses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Responses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Response.Responses.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Response.Responses.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Response.Responses.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Responses.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Response.Responses.Pong}
 */
proto.v1.caller.v1.Response.Responses.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Response.Responses.Pong;
  return proto.v1.caller.v1.Response.Responses.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Response.Responses.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Response.Responses.Pong}
 */
proto.v1.caller.v1.Response.Responses.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Response.Responses.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Response.Responses.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Response.Responses.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Responses.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Response.Responses.Auth.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Response.Responses.Auth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Response.Responses.Auth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Responses.Auth.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Response.Responses.Auth}
 */
proto.v1.caller.v1.Response.Responses.Auth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Response.Responses.Auth;
  return proto.v1.caller.v1.Response.Responses.Auth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Response.Responses.Auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Response.Responses.Auth}
 */
proto.v1.caller.v1.Response.Responses.Auth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Response.Responses.Auth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Response.Responses.Auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Response.Responses.Auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Responses.Auth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.v1.caller.v1.Response.Responses.Auth.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Response.Responses.Auth} returns this
 */
proto.v1.caller.v1.Response.Responses.Auth.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Response.Updates.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Response.Updates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Response.Updates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Updates.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Response.Updates}
 */
proto.v1.caller.v1.Response.Updates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Response.Updates;
  return proto.v1.caller.v1.Response.Updates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Response.Updates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Response.Updates}
 */
proto.v1.caller.v1.Response.Updates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Response.Updates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Response.Updates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Response.Updates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Updates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Response.Updates.RTC_state.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Response.Updates.RTC_state} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Updates.RTC_state.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rtcState: (f = msg.getRtcState()) && layer1_caller_v1_signaling_pb.Signaling.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Response.Updates.RTC_state}
 */
proto.v1.caller.v1.Response.Updates.RTC_state.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Response.Updates.RTC_state;
  return proto.v1.caller.v1.Response.Updates.RTC_state.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Response.Updates.RTC_state} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Response.Updates.RTC_state}
 */
proto.v1.caller.v1.Response.Updates.RTC_state.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new layer1_caller_v1_signaling_pb.Signaling;
      reader.readMessage(value,layer1_caller_v1_signaling_pb.Signaling.deserializeBinaryFromReader);
      msg.setRtcState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Response.Updates.RTC_state.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Response.Updates.RTC_state} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Updates.RTC_state.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRtcState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      layer1_caller_v1_signaling_pb.Signaling.serializeBinaryToWriter
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Response.Updates.RTC_state} returns this
 */
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Signaling rtc_state = 2;
 * @return {?proto.v1.caller.v1.Signaling}
 */
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.getRtcState = function() {
  return /** @type{?proto.v1.caller.v1.Signaling} */ (
    jspb.Message.getWrapperField(this, layer1_caller_v1_signaling_pb.Signaling, 2));
};


/**
 * @param {?proto.v1.caller.v1.Signaling|undefined} value
 * @return {!proto.v1.caller.v1.Response.Updates.RTC_state} returns this
*/
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.setRtcState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Response.Updates.RTC_state} returns this
 */
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.clearRtcState = function() {
  return this.setRtcState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Response.Updates.RTC_state.prototype.hasRtcState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.caller.v1.Response.Updates.CallEnded.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.caller.v1.Response.Updates.CallEnded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.caller.v1.Response.Updates.CallEnded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Updates.CallEnded.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cause: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.caller.v1.Response.Updates.CallEnded}
 */
proto.v1.caller.v1.Response.Updates.CallEnded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.caller.v1.Response.Updates.CallEnded;
  return proto.v1.caller.v1.Response.Updates.CallEnded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.caller.v1.Response.Updates.CallEnded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.caller.v1.Response.Updates.CallEnded}
 */
proto.v1.caller.v1.Response.Updates.CallEnded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {!proto.v1.caller.v1.Response.Updates.CallEnded.Cause} */ (reader.readEnum());
      msg.setCause(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.caller.v1.Response.Updates.CallEnded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.caller.v1.Response.Updates.CallEnded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.caller.v1.Response.Updates.CallEnded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.caller.v1.Response.Updates.CallEnded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCause();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.v1.caller.v1.Response.Updates.CallEnded.Cause = {
  CAUSE_NONE: 0,
  CAUSE_USER_DECLINE: 1,
  CAUSE_USER_HANGUP: 2
};

/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.v1.caller.v1.Response.Updates.CallEnded.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.caller.v1.Response.Updates.CallEnded} returns this
 */
proto.v1.caller.v1.Response.Updates.CallEnded.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Cause cause = 2;
 * @return {!proto.v1.caller.v1.Response.Updates.CallEnded.Cause}
 */
proto.v1.caller.v1.Response.Updates.CallEnded.prototype.getCause = function() {
  return /** @type {!proto.v1.caller.v1.Response.Updates.CallEnded.Cause} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.v1.caller.v1.Response.Updates.CallEnded.Cause} value
 * @return {!proto.v1.caller.v1.Response.Updates.CallEnded} returns this
 */
proto.v1.caller.v1.Response.Updates.CallEnded.prototype.setCause = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.v1.caller.v1.Response.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.caller.v1.Response} returns this
 */
proto.v1.caller.v1.Response.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Responses.Pong pong = 2;
 * @return {?proto.v1.caller.v1.Response.Responses.Pong}
 */
proto.v1.caller.v1.Response.prototype.getPong = function() {
  return /** @type{?proto.v1.caller.v1.Response.Responses.Pong} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Response.Responses.Pong, 2));
};


/**
 * @param {?proto.v1.caller.v1.Response.Responses.Pong|undefined} value
 * @return {!proto.v1.caller.v1.Response} returns this
*/
proto.v1.caller.v1.Response.prototype.setPong = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.v1.caller.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Response} returns this
 */
proto.v1.caller.v1.Response.prototype.clearPong = function() {
  return this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Response.prototype.hasPong = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RTCInfo rtc_info = 3;
 * @return {?proto.v1.caller.v1.RTCInfo}
 */
proto.v1.caller.v1.Response.prototype.getRtcInfo = function() {
  return /** @type{?proto.v1.caller.v1.RTCInfo} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.RTCInfo, 3));
};


/**
 * @param {?proto.v1.caller.v1.RTCInfo|undefined} value
 * @return {!proto.v1.caller.v1.Response} returns this
*/
proto.v1.caller.v1.Response.prototype.setRtcInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.v1.caller.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Response} returns this
 */
proto.v1.caller.v1.Response.prototype.clearRtcInfo = function() {
  return this.setRtcInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Response.prototype.hasRtcInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Error error = 4;
 * @return {?proto.v1.caller.v1.Error}
 */
proto.v1.caller.v1.Response.prototype.getError = function() {
  return /** @type{?proto.v1.caller.v1.Error} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Error, 4));
};


/**
 * @param {?proto.v1.caller.v1.Error|undefined} value
 * @return {!proto.v1.caller.v1.Response} returns this
*/
proto.v1.caller.v1.Response.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.v1.caller.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Response} returns this
 */
proto.v1.caller.v1.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Updates.RTC_state rtc_updated = 5;
 * @return {?proto.v1.caller.v1.Response.Updates.RTC_state}
 */
proto.v1.caller.v1.Response.prototype.getRtcUpdated = function() {
  return /** @type{?proto.v1.caller.v1.Response.Updates.RTC_state} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Response.Updates.RTC_state, 5));
};


/**
 * @param {?proto.v1.caller.v1.Response.Updates.RTC_state|undefined} value
 * @return {!proto.v1.caller.v1.Response} returns this
*/
proto.v1.caller.v1.Response.prototype.setRtcUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.v1.caller.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Response} returns this
 */
proto.v1.caller.v1.Response.prototype.clearRtcUpdated = function() {
  return this.setRtcUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Response.prototype.hasRtcUpdated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Updates.CallEnded call_ended = 6;
 * @return {?proto.v1.caller.v1.Response.Updates.CallEnded}
 */
proto.v1.caller.v1.Response.prototype.getCallEnded = function() {
  return /** @type{?proto.v1.caller.v1.Response.Updates.CallEnded} */ (
    jspb.Message.getWrapperField(this, proto.v1.caller.v1.Response.Updates.CallEnded, 6));
};


/**
 * @param {?proto.v1.caller.v1.Response.Updates.CallEnded|undefined} value
 * @return {!proto.v1.caller.v1.Response} returns this
*/
proto.v1.caller.v1.Response.prototype.setCallEnded = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.v1.caller.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.caller.v1.Response} returns this
 */
proto.v1.caller.v1.Response.prototype.clearCallEnded = function() {
  return this.setCallEnded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.caller.v1.Response.prototype.hasCallEnded = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.v1.caller.v1);
